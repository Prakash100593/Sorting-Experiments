import instrumented_sort as i
import random

"""

The below program implements the selection sort
and Merge sort on randomly generated list of numbers
by importing instrumented_sort as input.

Along with printing output on the console it generates 
observation.txt file with algorithm name, time spent
and no of comparisons each algorithm took.

"""


def Check_sorted(OrgList,sortedlist):
    '''
    It takes inout of original unsorted list and sorted list/
    it then check the sorted list with the list generated by
    python sort function, if the list matches it will rerutn
    true or else it will return false.


    :param OrgList:  original unsorted list
    :param sortedlist: sorted list after running ssort/msort algorithm
    :return: returns boolean value true or false
    '''
    OrgList.sort()
    if(OrgList == sortedlist[0]):
        return True
    else:
        return False



def generate_data(N):
    '''
    Generates a list of random numbers of the size N
    and shuffles the list to get the unsorted list.

    :param N: no  of elements to pe present in the list
    :return: unrosted list of random numbers
    '''
    result = list(range(N))
    random.shuffle(result)
    return result


def main():
    '''
    Implements sorting alogirthms from instrumented_sort
    and prints the ouput on the console as well as on
    the observation.txt file.

    :return: None
    '''
    Headers="\nAlgorithms    " + "\t\t\t N" + "\t\t\t Comparisons" + "\t\t\t Seconds\n"
    file3 = open('Observations.txt', "a")
    file3.seek(0)
    file3.truncate(0)

    file3.write(Headers)

    for I in range(0,5):
        N=input('Enter the No of elements for the list')
        List = generate_data(int(N))

        print()
        print(List)
        sortedlist = i.ssort(List)
        print(sortedlist)
        print()

        result = Check_sorted(List,sortedlist)
        print("After calling check sort for Selection sort : - " + str(result))
        print()

        print(List)
        sortednums = i.Mergesort(List,0)
        result = Check_sorted(List,sortednums[0])
        substring1= str(sortednums[0]).split(',')
        n1= int(N)
        substring2 = str(substring1[n1]).strip(')')
        print(sortednums)

        print()
        print("After calling check sort for Merge sort : - " + str(result))
        finalmessage=""
        finalmessage= finalmessage + "\nSelection Sort" + "\t\t\t "+N +"\t\t\t\t  "+str(sortedlist[1]) + "     \t\t\t "+ str(sortedlist[2]%60)
        finalmessage= finalmessage + "\nMerge Sort    " + "\t\t\t "+N +"\t\t\t\t "+substring2 + "     \t\t\t "+ str(sortednums[1]%60)
        finalmessage = finalmessage + "\n"
        file3.write(finalmessage)

        print()
        print("Algorithms    " + "\t\t\t N" + "\t\t\t Comparisons" + "\t\t\t Seconds")
        print("Selection Sort" + "\t\t\t "+N +"\t\t\t\t  "+str(sortedlist[1]) + "     \t\t\t "+ str(sortedlist[2]))
        print("Merge Sort    " + "\t\t\t "+N +"\t\t\t\t "+substring2 + "     \t\t\t "+ str(sortednums[1])+"\n")
    file3.close()

if __name__ == '__main__':
    main()
