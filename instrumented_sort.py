import random
import time



"""
The below program implements the selection sort
and Merge sort on given set of numbers and randomly
generated list of numbers.

It also provides us with the time spent for each
of the algorithm and the no of comparisons the
alogirthm took to sort the list.

This serves as input for sorting_experiment.py
and also provides the functionality of
selection sort and merge sort.

"""


def ssort(data):
    '''
    ssort - It applies the selection sort algorithm
    on the input list to return the sorted list.

    For selection sort, we find out the minimum element
    from the list and then place it at the foremost position
    thus always making sure that we have one part as sorted
    one in the list.

    Big O complexity of selection sort is o(n^2)

    :param data: The original unsorted list
    :return: sorted list, noofcomparisons and time spent
    '''
    start_time = time.clock()
    counter=0
    for k in range(len(data)-1):
       minimumindex = k
       for index in range(k+1,len(data)):
           if data[index] < data[minimumindex]:
               minimumindex = index
               counter = counter+1
       temp = data[k]
       data[k] = data[minimumindex]
       data[minimumindex] = temp
       counter = counter+1
    now=time.clock()
    executiontime = now-start_time
    return data,counter,executiontime

def Mergesort(data,mergecounter):
    '''
    records the time that merge sort algorithm takes
    to sort a unsorted list

    we will give a call to msort function to
    sort the unsorted list.

    :param data: Unsorted original list at the start
    :param mergecounter: no of comparisons initliazed to 0.
    :return: sorted list and time
    '''
    start_time = time.clock()
    sortednums = msort(data,mergecounter)
    now = time.clock()
    executiontime = now-start_time
    return sortednums,executiontime

def msort(data,mergecounter):
    '''
    Applies merge sort algorithm on the unsorted list.
    In merge sort we basically divide the list till one
    element is left and then start merging the individual
    element by comparing the value and returning the sorted
    list.

    It gives recursive call to the msort, with partial
    sorted list being passed as an input every time
    finally returning the sorted list.


    :param data: Unsorted original list at the start
    :param mergecounter: no of comparisons initliazed to 0.
    :return: sorted list and time
    '''
    counter = mergecounter
    if(len(data) ==0):
        return data,0
    if len(data)>1:
        middle = len(data)//2
        first = data[:middle]
        second = data[middle:]

        left_part = msort(first,counter)
        right_part = msort(second,counter)

        counter += left_part[1] + right_part[1]

        firstindex=0
        secondindex=0
        mergedindex=0
        while firstindex < len(first) and secondindex < len(second):

            if first[firstindex] < second[secondindex]:
                data[mergedindex]=first[firstindex]
                firstindex =firstindex+1
                counter += 1

            else:
                data[mergedindex]=second[secondindex]
                secondindex=secondindex+1
                counter += 1

            mergedindex=mergedindex+1

        while firstindex < len(first):
            data[mergedindex]=first[firstindex]
            firstindex=firstindex+1
            mergedindex=mergedindex+1
            #counter += 1

        while secondindex < len(second):
            data[mergedindex]=second[secondindex]
            secondindex=secondindex+1
            mergedindex=mergedindex+1
            #counter += 1
    return data, counter



def generate_data(N):
    '''
    Calls random function to generate list
    of size N, and shuffles it so that we get
    an unsorted list.

    :param N: No of elements required in the list
    :return: shuffled list
    '''
    result = list(range(N))
    random.shuffle(result)
    return result

def main():
    List = generate_data(10)

    nums = [3,5,4,1]
    print("Input list for selection sort: - "+str(nums))
    sortedlist = ssort(nums)
    print("Ater applying Selection sort on above input : - " +str(sortedlist))
    print()

    nums = [3, 5, 4, 1]
    print("Input list for Merge sort: - "+str(nums))
    sortednums = Mergesort(nums,0)
    print("Ater applying Merge sort on above input : - " +str(sortednums))
    print()


    print("Input list generated by random for selection sort: - "+str(List))
    sortedlist = ssort(List)
    print("Ater applying Selection sort on random list : - " +str(sortedlist))
    print()


    print("Input list generated by random for Merge sort: - "+str(List))
    sortedlist = ssort(List)
    print("Ater applying Merge sort on random list : - " +str(sortedlist))
    print()


if __name__ == '__main__':
    main()

